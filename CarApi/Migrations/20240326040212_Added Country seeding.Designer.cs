// <auto-generated />
using System;
using CarApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CarApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240326040212_Added Country seeding")]
    partial class AddedCountryseeding
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CarApi.Models.Appointment", b =>
                {
                    b.Property<int>("IdAppointment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdAppointment"));

                    b.Property<DateTime>("Created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("IdUser")
                        .HasColumnType("integer");

                    b.Property<int>("Id_Car")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Modified_at")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("IdAppointment");

                    b.HasIndex("IdUser");

                    b.HasIndex("Id_Car");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("CarApi.Models.Brand", b =>
                {
                    b.Property<int>("IdBrand")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdBrand"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("IdCountry")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdBrand");

                    b.HasIndex("IdCountry");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("CarApi.Models.Car", b =>
                {
                    b.Property<int>("IdCar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdCar"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("IdBrand")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<float>("Year")
                        .HasColumnType("real");

                    b.HasKey("IdCar");

                    b.HasIndex("IdBrand");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("CarApi.Models.Country", b =>
                {
                    b.Property<int>("IdCountry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdCountry"));

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Flag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdCountry");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("CarApi.Models.OrderDetail", b =>
                {
                    b.Property<int>("IdOrderDetail")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdOrderDetail"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("IdUser")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("Total")
                        .HasColumnType("real");

                    b.HasKey("IdOrderDetail");

                    b.HasIndex("IdUser");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("CarApi.Models.OrderItem", b =>
                {
                    b.Property<int>("IdOrderItem")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdOrderItem"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("IdCar")
                        .HasColumnType("integer");

                    b.Property<int>("IdOrderDetail")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OrderDetailIdOrderDetail")
                        .HasColumnType("integer");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("IdOrderItem");

                    b.HasIndex("IdCar");

                    b.HasIndex("OrderDetailIdOrderDetail");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("CarApi.Models.User", b =>
                {
                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdUser"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FirstName")
                        .HasColumnType("integer");

                    b.Property<int>("LastName")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdUser");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CarApi.Models.UserAddress", b =>
                {
                    b.Property<int>("IdUserAddress")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdUserAddress"));

                    b.Property<string>("AddressKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("IdCountry")
                        .HasColumnType("integer");

                    b.Property<int>("IdUser")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PostalCode")
                        .HasColumnType("integer");

                    b.Property<int>("Telephone")
                        .HasColumnType("integer");

                    b.HasKey("IdUserAddress");

                    b.HasIndex("IdCountry");

                    b.HasIndex("IdUser");

                    b.ToTable("UserAddresses");
                });

            modelBuilder.Entity("CarApi.Models.Appointment", b =>
                {
                    b.HasOne("CarApi.Models.User", "User")
                        .WithMany("Appointments")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarApi.Models.Car", "Car")
                        .WithMany("Appointments")
                        .HasForeignKey("Id_Car")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarApi.Models.Brand", b =>
                {
                    b.HasOne("CarApi.Models.Country", "Country")
                        .WithMany("Brands")
                        .HasForeignKey("IdCountry")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("CarApi.Models.Car", b =>
                {
                    b.HasOne("CarApi.Models.Brand", "Brand")
                        .WithMany("Cars")
                        .HasForeignKey("IdBrand")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("CarApi.Models.OrderDetail", b =>
                {
                    b.HasOne("CarApi.Models.User", "User")
                        .WithMany("OrderDetails")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarApi.Models.OrderItem", b =>
                {
                    b.HasOne("CarApi.Models.Car", "Car")
                        .WithMany("OrderItem")
                        .HasForeignKey("IdCar")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarApi.Models.OrderDetail", "OrderDetail")
                        .WithMany("OrderItem")
                        .HasForeignKey("OrderDetailIdOrderDetail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("OrderDetail");
                });

            modelBuilder.Entity("CarApi.Models.UserAddress", b =>
                {
                    b.HasOne("CarApi.Models.Country", "Country")
                        .WithMany("UserAddresses")
                        .HasForeignKey("IdCountry")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarApi.Models.User", "User")
                        .WithMany("UserAddresses")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarApi.Models.Brand", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("CarApi.Models.Car", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("CarApi.Models.Country", b =>
                {
                    b.Navigation("Brands");

                    b.Navigation("UserAddresses");
                });

            modelBuilder.Entity("CarApi.Models.OrderDetail", b =>
                {
                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("CarApi.Models.User", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("OrderDetails");

                    b.Navigation("UserAddresses");
                });
#pragma warning restore 612, 618
        }
    }
}
